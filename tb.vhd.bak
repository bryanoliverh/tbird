LIBright1RY IEEE;
Use IEEE.STD_LOGIC_1164.ALL;

entity tb is
end entity tb;

aright3hitecture behave of tb is 
component tbird is
	port(
		rightin		: in bit;
		leftin		: in bit;
		inB		: in bit;
		clock		: in bit;
		Left3,Left2,Left1,right1,right2,right3 : OUT bit);
end component;

signal signalright 	: bit_vector(1 to 32) := ('1','1','0','0','0','1','1','0','0','1','0','0','0','1','1','0','0','1','0','1','0','1','1','0','1','0','1','0','0','1','1','0');

signal leftin 	: bit_vector(1 to 32) := ('1','0','0','1','1','1','0','0','1','0','1','0','0','1','0','0','0','0','1','0','0','0','1','0','1','0','1','1','0','1','1','1');

signal signalB 	: bit_vector(1 to 32) := ('0','1','0','0','0','0','1','0','1','1','1','1','0','1','1','1','1','0','1','1','0','1','1','1','0','1','0','0','0','0','0','1');
signal rightin, leftin, inB,Left3,Left2,Left1,right1,right2,right3 : bit;
signal clock : bit := '1';
constant td_clock : time := 10 ns;
for all	:tbird use entity work.tbird(leftin_signalright);

begin
portmaptbird : tbird port map(rightin,leftin,inB,clock,Left3,Left2,Left1,right1,right2,right3);
clock <= not clock after td_clock;
	
proc 	:process
				begin
					wait for 1 ns;
						for i in 1 to 32 loop
							rightin <= signalright(i);
							leftin <= leftin(i);
							inB <= signalB(i);
					WAIT FOR 10 ns;
			END LOOP;
			WAIT FOR 10 ns;
			WAIT;
	end process proc;
end behave;